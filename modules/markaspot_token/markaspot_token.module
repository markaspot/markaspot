<?php

/**
 * @file
 * Contains markaspot_token.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * Implements hook_help().
 */
function markaspot_token_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the markaspot_token module.
    case 'help.page.markaspot_token':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds custom token') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_token_info().
 */
function markaspot_token_token_info() {
  // Add any new tokens.
  $type = [
    'name' => t('Nodes'),
    'description' => t('Tokens related to individual content items, or "nodes".'),
    'needs-data' => 'node',
  ];

  // Core tokens for nodes.
  $node['uuid'] = [
    'name' => t("Content UUID"),
    'description' => t('The global unique ID of the content item, or "node".'),
  // Return them.
  ];
  $node['request_id'] = [
    'name' => t("Service Request ID"),
    'description' => t('The Request ID of 311 Service requests.'),
    // Return them.
  ];

  return [
    'types' => ['node' => $type],
    'tokens' => ['node' => $node],
  ];
}

/**
 * Implements hook_tokens().
 */
function markaspot_token_tokens($type,
 $tokens,
 array $data,
 array $options,
BubbleableMetadata $bubbleable_metadata) {

  $replacements = [];

  // Node tokens.
  if ($type == 'node' && !empty($data['node'])) {
    /* @var \Drupal\node\NodeInterface $node */
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Simple key values on the node.
        case 'uuid':
          $replacements[$original] = $node->uuid();
          break;

        case 'request_id':
          $replacements[$original] = $node->request_id->value;
          break;
      }
    }

    // Chained token relationships.
    if (($parent_tokens = \Drupal::token()->findWithPrefix($tokens, 'source')) && $source_node = $node->getUntranslated()) {
      $replacements += \Drupal::token()->generate('node', $parent_tokens, array('node' => $source_node), $options, $bubbleable_metadata);
    }
    if (($node_type_tokens = \Drupal::token()->findWithPrefix($tokens, 'content-type')) && $node_type = \Drupal\node\Entity\NodeType::load($node->bundle())) {
      $replacements += \Drupal::token()->generate('content-type', $node_type_tokens, array('node_type' => $node_type), $options, $bubbleable_metadata);
    }
    if (($url_tokens = \Drupal::token()->findWithPrefix($tokens, 'url'))) {
      $replacements += \Drupal::token()->generate('url', $url_tokens, array('url' => $node->toUrl()), $options, $bubbleable_metadata);
    }
  }
  return $replacements;

}
