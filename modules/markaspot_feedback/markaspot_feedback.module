<?php

/**
 * @file
 * Contains markaspot_feedback.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function markaspot_feedback_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the markaspot_feedback module.
    case 'help.page.markaspot_feedback':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Mark-a-Spot Feedback') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function markaspot_feedback_cron() {
  // We access our configuration.
  $config = \Drupal::config('markaspot_feedback.settings');
  $mailText = $config->get('mailtext');
  // Default to an hourly interval. Of course, cron has to be running at least
  // hourly for this to work.
  $interval = $config->get('interval');
  $interval = !empty($interval) ? $interval : 3600;

  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in the site state.
  $next_execution = \Drupal::state()
    ->get('markaspot_feedback.next_execution', 0);
  if (\Drupal::time()->getRequestTime() >= $next_execution) {

    $feedbackSendable = \Drupal::service('markaspot_feedback.feedback')->load();
    // $config = \Drupal::configFactory()->getEditable('markaspot_feedback.settings');
    // $count = count($feedbackSendable);

    foreach ($feedbackSendable as $feedbackSend) {

      $node = $feedbackSend;

      $mailManager = \Drupal::service('plugin.manager.mail');
      $module = "markaspot_feedback";
      $key = 'resubmit_request';
      $params['message'] = markaspot_feedback_getBody($node, $mailText);

      $params['node_title'] = $node->label();
      $langcode = \Drupal::currentUser()->getPreferredLangcode();
      $to = $node->field_e_mail->value;
      \Drupal::logger('Mark-a-Spot Feedback')->notice(t('Mail will be sent to.' . $to));

      if (isset($to) && $to !== '') {
        \Drupal::logger('Mark-a-Spot Feedback')->notice(t('Mail will be sent.'));

        $result = $mailManager->mail($module, $key, $to, $langcode, $params, 'no-reply@example.com', TRUE);
        if ($result['result'] == TRUE) {
          \Drupal::logger('Mark-a-Spot Feedback')->notice(t('Mail was sent.'));
        }
        else {
          \Drupal::logger('Mark-a-Spot Feedback')->error(t('Mail was not sent.'));
        }
      }

    }

    \Drupal::state()
      ->set('markaspot_feedback.next_execution', \Drupal::time()->getRequestTime() + $interval);
  }

}


function markaspot_feedback_getBody($node, $mailText) {

  $data = [
    'node' => $node,
  ];
  $token_service = \Drupal::token();
  // Replace the token for subject.
  return $token_service->replace($mailText, $data);
}

function markaspot_feedback_getGroupField($node){
  $group_ids = [];

  $group_contents = \Drupal\group\Entity\GroupContent::loadByEntity($node);
  foreach ($group_contents as $group_content) {
    $group_ids[] = $group_content->getGroup()->id();
    foreach ($group_ids as $group) {
      $affectedGroup = \Drupal\group\Entity\Group::load($group);

      $headOrganisationEmails = $affectedGroup->get('field_head_organisation_e_mail')->getString();
    }
  }

  return $headOrganisationEmails;
}


function markaspot_feedback_getOrganisationTermField($node){
  $tid = $node->get('field_organisation')->target_id;
  if ($tid !== NULL) {
    $term = Drupal\taxonomy\Entity\Term::load($tid);
    $headOrganisationEmails = $term->get('field_head_organisation_e_mail')->getString();
    return $headOrganisationEmails;
  } else {
    \Drupal::logger('Mark-a-Spot Feedback')->notice(t('We have\'nt found an e-Mail Address'));
    return false;
  }
}


/**
 * Implements hook_mail().
 */

function markaspot_feedback_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );

  switch ($key) {
    case 'resubmit_request':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Your feedback for: @title', array('@title' => $params['node_title']), $options);
      $message['body'][] = $params['message'];
      break;
  }
}
