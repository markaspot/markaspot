<?php

/**
 * @file
 * Contains cgn_request_id.module..
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
/**
 * Implements hook_help().
 */
function markaspot_request_id_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the cgn_request_id module.
    case 'help.page.cgn_request_id':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds a custom request id') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info()
 */
function markaspot_request_id_entity_base_field_info(EntityTypeInterface $entity_type) {
  $bundle = $entity_type->getBundleLabel();

  if ($entity_type->id() === 'node') {
    // $node_type = NodeType::load();
    // $field_request_id = BaseFieldDefinition::create('string');
    // $field_request_id->setDescription("This is a custom Request ID");.
    $fields['request_id'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Request ID'))
      ->setDescription("This is a custom request-id")
      // ->setRequired(TRUE)
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE)
      ->setSetting('max_length', 32)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => -5,
      ])
      ->setDisplayOptions('form', [
        'type' => 'hidden',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('form', TRUE);

    return $fields;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function markaspot_request_id_form_alter(&$form, FormStateInterface $form_state) {

  // Disable some fields.
  $field = 'request_id';
  $form[$field]['#disabled'] = 'disabled';

}

/**
 * Implements hook_node_insert().
 */
function markaspot_request_id_node_insert(EntityInterface $node) {

  if ($node->getType() == 'service_request') {

    $query = \Drupal::entityQuery('node');
    $query->condition('type', 'service_request');
    $query->accessCheck(FALSE);

    $entity_ids = $query->execute();
    // count array keys for the latest ID
    $last_request_id = count($entity_ids);

    // check for doubles, an effect that occurs
    $existing = \Drupal::entityQuery('node')->condition('request_id', $last_request_id)->execute();

    if (!empty($existing)) {
      $last_request_id = $last_request_id + 1;
    }

    $config = \Drupal::configFactory()->getEditable('markaspot_request_id.settings');
    $id_pattern = $config->get('format');
    $request_id = (isset($id_pattern)) ? $last_request_id . '-' . date($id_pattern) : $nid;
    $node->request_id->value = $request_id;

    $node->setNewRevision(FALSE);
    $node->save();
  }

}

/**
 * Implements hook_node_presave().
 */
function markaspot_request_id_node_presave(EntityInterface $node) {

  if ($node->bundle() == 'service_request') {
    $tid = $node->field_category->target_id;
    // Instead of contributed module auto entity_title:
    // Get the service name by ID and update the title field.
    if (isset($tid)) {
      $service_name = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($tid);

      $node->title = '#' . $node->request_id->value . '  ' . $service_name->name->value;

    }

  }
}
