<?php

/**
 * @file
 * Contains cgn_request_id.module..
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Datetime\DrupalDateTime;

use Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException;

/**
 * Implements hook_help().
 */
function markaspot_request_id_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the cgn_request_id module.
    case 'help.page.cgn_request_id':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds a custom request id') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info()
 */
function markaspot_request_id_entity_base_field_info(EntityTypeInterface $entity_type) {
  $bundle = $entity_type->getBundleLabel();

  if ($entity_type->id() === 'node') {
    // $node_type = NodeType::load();
    // $field_request_id = BaseFieldDefinition::create('string');
    // $field_request_id->setDescription("This is a custom Request ID");.
    $fields['request_id'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Request ID'))
      ->setDescription("This is a custom request-id")
      // ->setRequired(TRUE)
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE)
      ->setSetting('max_length', 32)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'region' => 'hidden',
        'weight' => -5,
      ])
      ->setDisplayOptions('form', [
        'region' => 'hidden',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('form', TRUE);

    return $fields;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function markaspot_request_id_form_alter(&$form, FormStateInterface $form_state) {

  // Disable some fields.
  $field = 'request_id';
  $form[$field]['#disabled'] = 'disabled';

}

/**
 * Implements hook_node_presave().
 */
function markaspot_request_id_node_presave(EntityInterface $node) {
  if ($node->bundle() == 'service_request') {
    if ($node->request_id->value == NULL) {
      // $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $request_id = markaspot_request_id_create_request_id();
      $node->request_id->value = $request_id;
      $title = markaspot_request_id_create_title($node, $request_id);
      markaspot_request_id_update_table($node, $title, $request_id);
    }  else {
      $request_id = $node->request_id->value;
      $title = markaspot_request_id_create_title($node, $request_id);
    }
    $node->title = $title;

  }
}

function markaspot_request_id_update_table($node, $title, $request_id) {
  \Drupal::database()->update('node_field_data')
    ->fields([
      'title' => $title,
      'request_id' => $request_id,
    ])
    ->condition('nid', $node->id(), '=')
    ->execute();
}


/**
 * @return int|string
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function markaspot_request_id_create_request_id() {

  /** @var \Drupal\Core\Database\Connection $connection */
  $connection = \Drupal::service('database');
  $config = \Drupal::configFactory()
    ->getEditable('markaspot_request_id.settings');
  // Check if update has been run and custom table has been created.
  if (markaspot_request_id_check_table($connection)) {
    $timestamp = Drupal::time()->getRequestTime();
    // Get the latest serial id.
    $id = $connection->insert('markaspot_request_id')
      ->fields([
        // 'request_id' =>  $id . '-' . DateTime::createFromFormat(Y, $timestamp),
        'timestamp' => $timestamp,
      ])
      ->execute();
    // Write request id as string to row. todo: make request id periodically, or custom pattern

    // Update with the rollover feature
    if ($config->get('rollover')) {
      // If rollover data is manually set for development or testing.
      $custom_rollover = new DrupalDateTime($config->get('start'));
      $custom_rollover_start = $custom_rollover->getTimestamp();
      // rollover date should be the last second of the previous year.
      $yearly_rollover_start = mktime(23, 59, 59, 12, 31, date('Y') - 1);

      // Create Timestamp of both.
      $last_date = ($custom_rollover_start !== $yearly_rollover_start) ? $custom_rollover_start : $yearly_rollover_start;

      // Get the last request-id of previous year
      $last_of_year_id = $connection->select('markaspot_request_id', 'r')
        ->fields('r', ['request_id','offset'])
        ->condition('timestamp', $last_date,  '<=')
        ->condition('timestamp', 0,  '<>')
        ->orderBy('timestamp', 'DESC')
        ->range(0, 1)
        ->execute();

      // Get the preset delimiter between serial id and pattern.
      $delimiter = $config->get('delimiter');

      foreach ($last_of_year_id as $last) {
        $yearly_diff = explode($delimiter, $last->request_id);
        $offset = $last->offset ?? 0;
      }
      // Create date pattern from config and current request timestamp.
      $date = date($config->get('format'), $timestamp);

      // Calculate the following serial ID
      $followUpId = $id - $yearly_diff[0] - $offset;
      $update = $connection->update('markaspot_request_id')
        ->fields([
          'request_id' =>  $followUpId .  $delimiter  . $date,
          'offset' => $yearly_diff[0] + $offset
        ])
        ->condition('id', $id)
        ->execute();
    } else {
      $update = $connection->update('markaspot_request_id')
        ->fields([
          'request_id' =>  $id . '-' . date('Y', $timestamp)
        ])
        ->condition('id', $id)
        ->execute();
    }
    // Get the the latest request id (to be sure).
    $request_ids = $connection->select('markaspot_request_id', 'r')
      ->fields('r', ['request_id'])
      ->condition('r.id',$id)
      ->execute();

    foreach ($request_ids as $id) {
      return $id->request_id;
    }
  } else {
    $query = \Drupal::entityQuery('node');

    // get the latest nid of all existing service-requests.
    $query
      ->condition('type', 'service_request')
      ->accessCheck(FALSE)
      ->sort('nid', 'DESC')
      ->range(0, 1);

    $entity_ids = $query->execute();
    $last_request_nid = reset($entity_ids);
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');

    // Now load the the last service_request and check the request_id.

    $predecessor = $node_storage->load($last_request_nid);
    if (isset($predecessor->request_id->value)) {
      $last_request_id = $predecessor->request_id->value;
      \Drupal::logger('markaspot')
        ->notice("Last Request ID: " . $last_request_id . " | Last NID: " . $last_request_nid);
      $next = explode('-', $last_request_id);
      // Is one provided count up (needs increment of 2 if no NID is created yet)
      $next = (!empty($next[0])) ? $next[0] + 1 : 1;


      $id_pattern = $config->get('format');
      return (isset($id_pattern)) ? $next . '-' . date($id_pattern) : $next;
    }
  }
}

/**
 * @param $node
 * @param $request_id
 *
 * @return string
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function markaspot_request_id_create_title($node, $request_id) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $tid = $node->field_category->target_id;
  // Instead of contributed module auto entity_title:
  // Get the service name by ID and update the title field.
  $service_name = "";
  if (isset($tid)) {
    $taxonomy_term = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($tid);
    //$service_name = \Drupal::service('entity.repository')->getTranslationFromContext($taxonomy_term);
    if ($taxonomy_term !== NULL) {
      $service_name = \Drupal::service('entity.repository')
        ->getTranslationFromContext($taxonomy_term, $language);
    }
    return '#' . $request_id . ' ' . $service_name->name->value;
  }
}


function markaspot_request_id_check_table($connection){
  // Check if table exists, by simply querying it.
  try {
    $table = "markaspot_request_id";
    $connection->queryRange("SELECT 1 FROM {" . $table . "}", 0, 1);
    $connection->queryRange("Select offset FROM {" . $table . "}", 0, 1);
    return TRUE;
  }
  catch (\Exception $e) {
    return FALSE;
  }
}
