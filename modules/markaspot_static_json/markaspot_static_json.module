<?php

/**
 * @file
 * Contains markaspot_static_json.module..
 */

use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\BadResponseException;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function markaspot_static_json_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the markaspot_static_json module.
    case 'help.page.markaspot_static_json':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Generate static json for map view') . '</p>';
      return $output;
  }
}

/**
 * @defgroup cron_example Example: Cron
 * @ingroup examples
 * @{
 * Example using Cron API, including hook_cron() and @QueueWorker plugins
 *
 * This example is part of the Examples for Developers Project
 * which you can download and experiment with at
 * http://drupal.org/project/examples
 */

/**
 * Implements hook_cron().
 *
 * We implement hook_cron() to do "background" processing. It gets called every
 * time the Drupal cron runs. We then decide what has to happen in response.
 *
 * In this example, we log a message after the time given in its config
 * variable 'next_execution'. Then we update that variable to a time in the
 * future.
 */
function markaspot_static_json_cron() {
  // We access our configuration.
  $cron_config = \Drupal::configFactory()->getEditable('markaspot_static_json.cron');

  // Default to an hourly interval. Of course, cron has to be running at least
  // half hourly for this to work.
  $interval = $cron_config->get('interval');
  $interval = !empty($interval) ? $interval : 1800;

  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  $next_execution = $cron_config->get('markaspot_static_json.next_execution');
  $next_execution = !empty($next_execution) ? $next_execution : 0;
  if (REQUEST_TIME >= $next_execution) {

    markaspot_static_json_request();
    // This is a silly example of a cron job.
    // It just makes it obvious that the job has run without
    // making any changes to your database.
    \Drupal::logger('Mark-a-Spot Static Json')->notice('Static JSON cron ran');
    if (\Drupal::state()->get('mas_shown_status_message')) {
      drupal_set_message(t('Mark-a-Spot static JSON executed at %time', ['%time' => date_iso8601(REQUEST_TIME)]));
      \Drupal::state()->set('mas_shown_status_message', FALSE);
    }
    $cron_config->set('markaspot_static_json.next_execution', REQUEST_TIME + $interval)->save();
  }
}

/**
 * Client to receive json from georeport rest API.
 */
function markaspot_static_json_request() {

  // Preparing georeport API Request URI.
  $host = \Drupal::request()->getHost();
  \Drupal::logger('Mark-a-Spot Static JSON')->notice('Host: '. $host);

  $path = 'public://requests.json';
  if (file_exists($path)) {
    $json = file_get_contents($path, TRUE);
    $static_service_requests = json_decode($json);

  }
  else {
    \Drupal::logger('Mark-a-Spot Static JSON')
      ->warning(t('Static file could not be read.'));
    // $current_service_requests = json_decode($start_json, TRUE);
    file_save_data('[]', $path, FILE_EXISTS_REPLACE);
  }

  if ($host !== "default") {
    $cronkey = \Drupal::state()->get('system.cron_key');
    // todo:
    // Make limit configurable
    $uri = '//' . $host . '/georeport/v2/requests.json?limit=&extensions=true&key=' . $cronkey;
    \Drupal::logger('Mark-a-Spot Static JSON')->notice('Saving JSON from URL: '. $uri);

    try {
      $response = \Drupal::httpClient()->get($uri);
      $data = (string) $response->getBody();
      $current_service_requests = json_decode($data, TRUE);
      if (empty($data)) {
        return FALSE;
      }
      markaspot_static_json_memory();

      // Encode array.
      $merged = array_replace_recursive($static_service_requests, $current_service_requests);
      $data = json_encode($merged);

      $local = (file_exists($path)) ? file_save_data($data, $path, FILE_EXISTS_REPLACE) : file_unmanaged_save_data($response, $path, FILE_EXISTS_REPLACE);
      if (isset($local)) {
        \Drupal::logger('Mark-a-Spot Static JSON')
          ->notice(t('Static file saved.'));
      }
      else {
        \Drupal::logger('Mark-a-Spot Static JSON')
          ->notice(t('Static file could not be saved.'));
      }
      markaspot_static_json_memory();

      \Drupal::logger('Mark-a-Spot Static JSON')->info(t('Status finished'));
    }
    catch (RequestException $e) {
      return FALSE;
    }
  }
}

/**
 * Monitor memory usage in dblog.
 */
function markaspot_static_json_memory() {
  $mem_usage = memory_get_usage(TRUE);

  \Drupal::logger('Mark-a-Spot Static JSON')
    ->notice(round($mem_usage / 1048576, 2) . " megabytes");
}

/**
 * Implements hook_page_attachments.
 */
function markaspot_static_json_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'markaspot_static_json/static_json';
  $attachments['#attached']['drupalSettings']['mas']['static_json'] = '1';
}
