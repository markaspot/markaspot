<?php

use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use GuzzleHttp\Exception\RequestException;

/**
 * @file
 * Contains markaspot_static_json.module..
 */

/**
 * Implements hook_help().
 */
function markaspot_static_json_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the markaspot_static_json module.
    case 'help.page.markaspot_static_json':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Generate static json for map view') . '</p>';
      return $output;
  }
}

/**
 * @defgroup cron_example Example: Cron
 * @ingroup examples
 * @{
 * Example using Cron API, including hook_cron() and @QueueWorker plugins
 *
 * This example is part of the Examples for Developers Project
 * which you can download and experiment with at
 * http://drupal.org/project/examples
 */

/**
 * Implements hook_cron().
 */
function markaspot_static_json_cron() {
  $cron_config = \Drupal::configFactory()->getEditable('markaspot_static_json.cron');
  $interval = $cron_config->get('interval') ?: 3600;

  $settings_config = Drupal::configFactory()->getEditable('markaspot_static_json.settings');
  // Set limit from config
  $limit = $settings_config->get('limit') ?: 50;
  // Set start page.
  $current_page = ($settings_config->get('reset') ===  1) ? 0 : $cron_config->get('static_page');
  \Drupal::logger('Mark-a-Spot Static JSON')->notice("Current page: " . $current_page);

  // Get current max.
  $count = markaspot_static_json_get_count();
  // Calculate max pages.
  $pages = ceil($count / $limit);
  \Drupal::logger('Mark-a-Spot Static JSON')->notice("Number of all pages with current limit: " . $pages);

  if ($current_page >= $pages - 1) {
    $cron_config->set('static_page', 0);
  }
  else {
    $cron_config->set('static_page', $current_page + 1);
  }

  markaspot_static_json_request($limit, $current_page);
  $request_time = \Drupal::time()->getRequestTime();

  if (\Drupal::state()->get('mas_shown_status_message')) {
    \Drupal::logger('Mark-a-Spot Static JSON')->notice(t('Mark-a-Spot static JSON executed at %time', ['%time' => date('c', $request_time)]));
    \Drupal::state()->set('mas_shown_status_message', FALSE);
  }

  $cron_config->set('markaspot_static_json.next_execution', $request_time + $interval)->save();
}


/**
 * Client to receive json from georeport rest API.
 */
function markaspot_static_json_request($limit, $current_page) {

  // Preparing georeport API Request URI.
  $host = \Drupal::request()->getHost();
  \Drupal::logger('Mark-a-Spot Static JSON')->notice('Host: ' . $host);

  if ($host !== "default") {
    $cronkey = \Drupal::state()->get('system.cron_key');
    // todo:
    // Make limit configurable.
    $protocol = \Drupal::request()->isSecure() ? 'https://' : 'http://';
    $uri = $protocol . $host . '/georeport/v2/requests.json?start_date=-9999days&limit=' . $limit . '&page=' . $current_page . '&extensions=true&key=' . $cronkey;
    \Drupal::logger('Mark-a-Spot Static JSON')->notice('Saving JSON from URL: ' . $uri);

    try {
      $response = \Drupal::httpClient()->get($uri);
      $data = (string) $response->getBody();

      if (empty($data)) {
        \Drupal::logger('Mark-a-Spot Static JSON')->warning('Empty response from REST API endpoint.');
        return FALSE;
      }

      $current_service_requests = json_decode($data, TRUE);
      if (!is_array($current_service_requests)) {
        \Drupal::logger('Mark-a-Spot Static JSON')->warning('Invalid response from REST API endpoint.');
        return FALSE;
      }

      markaspot_static_json_memory();

      $path = 'public://requests.json';
      if (file_exists($path)) {
        $json = file_get_contents($path, TRUE);
        $static_service_requests = ($json == 'null') ? [] : json_decode($json, true);
      } else {
        \Drupal::logger('Mark-a-Spot Static JSON')->warning('Static file could not be read.');
        $static_service_requests = [];
        \Drupal::service('file_system')->saveData('[]', $path, FileSystemInterface::EXISTS_REPLACE);
      }

      // Merge the new service requests with the existing ones.
      $merged = unique_multidim_array(array_merge($static_service_requests, $current_service_requests), 'service_request_id');
      $count = count($merged);

      // Save the merged service requests to the static JSON file.
      $data = json_encode($merged);
      $local = \Drupal::service('file_system')->saveData($data, $path, FileSystemInterface::EXISTS_REPLACE);
      if (isset($local)) {
        \Drupal::logger('Mark-a-Spot Static JSON')->notice(t('Static file saved, including ') . $count . ' items.');
      } else {
        \Drupal::logger('Mark-a-Spot Static JSON')->notice(t('Static file could not be saved.'));
      }

      markaspot_static_json_memory();
      \Drupal::logger('Mark-a-Spot Static JSON')->info(t('Status finished'));

      return TRUE;

    } catch (RequestException $e) {
      \Drupal::logger('Mark-a-Spot Static JSON')->warning('Request to REST API endpoint failed with message: ' . $e->getMessage());
      return FALSE;
    }
  }
}


/**
 * Monitor memory usage in dblog.
 */
function markaspot_static_json_memory() {
  $mem_usage = memory_get_usage(TRUE);

  \Drupal::logger('Mark-a-Spot Static JSON')
    ->notice(round($mem_usage / 1048576, 2) . " megabytes");
}

/**
 * Implements hook_page_attachments.
 */
function markaspot_static_json_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'markaspot_static_json/static_json';
  $attachments['#attached']['drupalSettings']['mas']['static_json'] = '1';
}

/**
 * Count Requests.
 */
function markaspot_static_json_get_count() {
  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('status', 1)
    ->condition('type', 'service_request');
  $result = $query->count()->execute();
  return $result;
}


/**
 * Remove duplicate requests
 */

function unique_multidim_array($array, $key) {
  $temp_array = array();
  $i = 0;
  $key_array = array();

  foreach($array as $val) {
    if (!in_array($val[$key], $key_array)) {
      $key_array[$i] = $val[$key];
      $temp_array[$i] = $val;
    }
    $i++;
  }
  return $temp_array;
}
